# Name of the workflow
name: Build

  # Controls what will trigger the workflow.
# Change it to your needs.
on:
  # A new push to the "main" branch.
  push:
    branches: [ "main" ]
  # A new pull request to the "main" branch.
  pull_request:
    branches: [ "main" ]

    # Allows to trigger the workflow from GitHub interfaces.
    workflow_dispatch:

# A single workflow can have multiple jobs.
jobs:
  # 'A new job is defined with the name: "build_android"
  build_android:
    # Defines what operating system will be used for the actions.
    # For android, we will use Linux GitHub-Hosted Runner.
    runs-on: ubuntu-22.04
    # Defines what step should be passed for successful run
    steps:
      # Checkout to the selected branch
      - name: Checkout
        uses: actions/checkout@v3
      # Download and install flutter packages
      - name: Install Flutter
        uses: subosito/flutter-action@v2
        with:
          # Define which stable flutter version should be used
          flutter-version: "3.16.0"
          channel: 'stable'
          # Enables cache for flutter packages
          # Speed up the process
          cache: true
      # Get Flutter project dependencies
      - name: Get dependencies
        run: flutter pub get

      - name: Build Release App Bundle
        run: flutter build appbundle --release

#      - name: Sign App Bundle
#        uses: r0adkll/sign-android-release@v1  # Or a similar action
#        id: sign_app
#        with:
#          # Access secrets securely using environment variables
#          releaseDirectory: build/app/outputs/bundle/release/
#          signingKeyBase64: ${{ secrets.ANDROID_KEYSTORE_FILE_BASE64 }}
#          alias: ${{ secrets.ANDROID_SIGNING_KEY_ALIAS }}
#          keyStorePassword: ${{ secrets.ANDROID_STORE_PASSWORD }}
#          keyPassword: ${{ secrets.ANDROID_SIGNING_KEY_PASSWORD }}

#      - name: Generate Signed APK
#        # Replace with the appropriate command for your build process
#        # (e.g., for Gradle, use bundletool)
#        run: bundletool build-apks --bundle=build/app/outputs/bundle/release/app-release.aab \
#          --output=build/app/outputs/apk/release/app-release.apk \
#          --ks-alias=${{ secrets.ANDROID_SIGNING_KEY_ALIAS }} \
#          --ks-pass=${{ secrets.ANDROID_STORE_PASSWORD }} \
#          --key-pass=${{ secrets.ANDROID_SIGNING_KEY_PASSWORD }}
      - name: Decode Keystore
        env:
          ENCODED_STRING: ${{ secrets.SIGNING_KEY_STORE_BASE64 }}
          SIGNING_KEY_STORE_PATH: ${{ secrets.SIGNING_KEY_STORE_PATH }}

        run: |
          echo $ENCODED_STRING > keystore-b64.txt
          base64 -d keystore-b64.txt > $SIGNING_KEY_STORE_PATH

      #2
      - name: Build Release apk
        env:
          SIGNING_KEY_STORE_PATH: ${{ secrets.SIGNING_KEY_STORE_PATH }}
          SIGNING_KEY_ALIAS: ${{ secrets.SIGNING_KEY_ALIAS }}
          SIGNING_KEY_PASSWORD: ${{ secrets.SIGNING_KEY_PASSWORD }}
          SIGNING_STORE_PASSWORD: ${{ secrets.SIGNING_STORE_PASSWORD }}
        run: ././android/gradlew assembleRelease

      - name: Build Release bundle
        env:
          SIGNING_KEY_STORE_PATH: ${{ secrets.SIGNING_KEY_STORE_PATH }}
          SIGNING_KEY_ALIAS: ${{ secrets.SIGNING_KEY_ALIAS }}
          SIGNING_KEY_PASSWORD: ${{ secrets.SIGNING_KEY_PASSWORD }}
          SIGNING_STORE_PASSWORD: ${{ secrets.SIGNING_STORE_PASSWORD }}
        run: ././android/gradlew bundleRelease

      - name: Upload Signed APK (Optional)
        uses: actions/upload-artifact@v3
        with:
          name: signed-apk
          path: build/app/outputs/apk/release/app-release.apk



